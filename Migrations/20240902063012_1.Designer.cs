// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240902063012_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticleComande", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("integer");

                    b.Property<int>("ComandeId")
                        .HasColumnType("integer");

                    b.HasKey("ArticlesId", "ComandeId");

                    b.HasIndex("ComandeId");

                    b.ToTable("ComandeArticles", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Machine_zone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantiteDemander")
                        .HasColumnType("integer");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("articles");
                });

            modelBuilder.Entity("WebApplication1.Models.BadgeManquant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Entre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sortie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BadgeManquants");
                });

            modelBuilder.Entity("WebApplication1.Models.ChangementHoraire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("IdTypeShift")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeShift");

                    b.HasIndex("UserId");

                    b.ToTable("ChangementHoraires");
                });

            modelBuilder.Entity("WebApplication1.Models.Comande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeBon")
                        .HasColumnType("text");

                    b.Property<string>("TypePiece")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("comandes");
                });

            modelBuilder.Entity("WebApplication1.Models.Conge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateEntre")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateSortie")
                        .HasColumnType("date");

                    b.Property<int>("IdTypeConge")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeConge");

                    b.HasIndex("UserId");

                    b.ToTable("Conges");
                });

            modelBuilder.Entity("WebApplication1.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CostCenter")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("WebApplication1.Models.TimeAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("IdTypeShift")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("auHeure")
                        .HasColumnType("text");

                    b.Property<string>("duHeure")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeShift");

                    b.HasIndex("UserId");

                    b.ToTable("TimeAdjustments");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebApplication1.Models.TypeConge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeConges");
                });

            modelBuilder.Entity("WebApplication1.Models.TypeShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DebutHeure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinHeure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeShifts");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Matricule")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLeaveDaysPerYear")
                        .HasColumnType("integer");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Shift")
                        .HasColumnType("character(1)");

                    b.Property<int>("TotalLeaveDaysTaken")
                        .HasColumnType("integer");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Componsation", b =>
                {
                    b.HasBaseType("WebApplication1.Models.TimeAdjustment");

                    b.ToTable("Componsations", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Permission", b =>
                {
                    b.HasBaseType("WebApplication1.Models.TimeAdjustment");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("ArticleComande", b =>
                {
                    b.HasOne("WebApplication1.Models.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Comande", null)
                        .WithMany()
                        .HasForeignKey("ComandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.BadgeManquant", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.ChangementHoraire", b =>
                {
                    b.HasOne("WebApplication1.Models.TypeShift", "TypeShift")
                        .WithMany()
                        .HasForeignKey("IdTypeShift")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeShift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Comande", b =>
                {
                    b.HasOne("WebApplication1.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Conge", b =>
                {
                    b.HasOne("WebApplication1.Models.TypeConge", "TypeConge")
                        .WithMany("Conges")
                        .HasForeignKey("IdTypeConge")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeConge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.TimeAdjustment", b =>
                {
                    b.HasOne("WebApplication1.Models.TypeShift", "TypeShift")
                        .WithMany()
                        .HasForeignKey("IdTypeShift")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeShift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Componsation", b =>
                {
                    b.HasOne("WebApplication1.Models.TimeAdjustment", null)
                        .WithOne()
                        .HasForeignKey("WebApplication1.Models.Componsation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Permission", b =>
                {
                    b.HasOne("WebApplication1.Models.TimeAdjustment", null)
                        .WithOne()
                        .HasForeignKey("WebApplication1.Models.Permission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.TypeConge", b =>
                {
                    b.Navigation("Conges");
                });
#pragma warning restore 612, 618
        }
    }
}
